"use client";

import Image from 'next/image';
import Link from 'next/link';
import { useCart } from '@/lib/useCart';
import { useProducts } from '@/lib/useProducts';
import { useEffect, useRef, useState } from 'react';
import Header from '@/components/layout/Header';


export default function Page() {
  const [phase, setPhase] = useState(0);
  const lineRef = useRef<HTMLSpanElement | null>(null);
  const [showSticky, setShowSticky] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [isFavOpen, setIsFavOpen] = useState(false);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const { items: homeCartItems, loading: homeCartLoading } = useCart();
  const { count: cartCount } = useCart();
  

  useEffect(() => {
    const el = lineRef.current;
    if (!el) return;
    const onEnd = () => {
      setPhase((prev) => (prev + 1) % 4);
    };
    el.addEventListener('animationend', onEnd);
    return () => el.removeEventListener('animationend', onEnd);
  }, [phase]);
  const { products } = useProducts(8);

  // Sticky desktop header on scroll
  useEffect(() => {
    const onScroll = () => {
      if (typeof window !== 'undefined') {
        setShowSticky(window.scrollY > 80);
      }
    };
    window.addEventListener('scroll', onScroll, { passive: true } as any);
    onScroll();
    return () => window.removeEventListener('scroll', onScroll as any);
  }, []);

  // Reveal-on-scroll for section cards
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const targets = Array.from(document.querySelectorAll<HTMLElement>('[data-reveal]'));
    if (targets.length === 0) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const el = entry.target as HTMLElement;
          if (entry.isIntersecting) {
            el.classList.add('is-visible');
          } else {
            el.classList.remove('is-visible');
          }
        });
      },
      { threshold: 0.15, rootMargin: '0px 0px -10% 0px' }
    );

    targets.forEach((el) => observer.observe(el));
    return () => observer.disconnect();
  }, []);

  // Scroll-driven URL path updates per section
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const sections = Array.from(document.querySelectorAll<HTMLElement>('section[data-route]'));
    if (sections.length === 0) return;

    let current = window.location.pathname;
    const io = new IntersectionObserver(
      (entries) => {
        const vis = entries
          .filter((e) => e.isIntersecting)
          .sort((a, b) => (b.intersectionRatio || 0) - (a.intersectionRatio || 0))[0];
        if (!vis) return;
        const el = vis.target as HTMLElement;
        const route = el.getAttribute('data-route');
        if (!route || route === current) return;
        window.history.replaceState(null, '', route);
        current = route;
      },
      { threshold: 0.55, rootMargin: '0px 0px -10% 0px' }
    );
    sections.forEach((s) => io.observe(s));
    return () => io.disconnect();
  }, []);

  // On initial load, if the path matches a section route, scroll to it
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const path = window.location.pathname;
    const target = document.querySelector<HTMLElement>(`section[data-route="${path}"]`);
    if (target) {
      // slight delay to ensure layout is ready
      setTimeout(() => {
        try {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        } catch {
          target.scrollIntoView();
        }
      }, 50);
    }
  }, []);

  const headingSub = phase === 0 ? 'Cloud' : phase === 1 ? 'Leather' : phase === 2 ? 'Shoes' : 'Loafers';
  const description =
    phase === 0
      ? 'Cocok dipakai harian maupun saat santai dan mempunyai bahan lembut'
      : phase === 1
      ? 'Desain minimalis dengan bahan kulit yang berkilau'
      : phase === 2
      ? 'Nyaman dipakai dengan bahan lembut terasa di kaki'
      : 'Tampil keren dengan sepatu nyaman di kaki';
  const activeLabel = phase === 0 ? '01._' : phase === 1 ? '02._' : phase === 2 ? '03._' : '04._';
  const mainImg =
    phase === 0
      ? '/images/test1.png'
      : phase === 1
      ? '/images/test2.png'
      : phase === 2
      ? '/images/test3.png'
      : '/images/test4.png';
  const productImg =
    phase === 0
      ? '/images/test1-produk.png'
      : phase === 1
      ? '/images/test2-produk.png'
      : phase === 2
      ? '/images/test3-produk.png'
      : '/images/test4-produk.png';
  const phaseTitle =
    phase === 0
      ? 'Sock Sneakers Cloud'
      : phase === 1
      ? 'Sock Sneakers Leather'
      : phase === 2
      ? 'Gladiator Sandals Shoes'
      : 'Gladiator Canvas Loafers';

  return (
    <main className="min-h-screen">
      {isSidebarOpen && (
        <div className="fixed inset-0 z-[70]">
          <div
            className="absolute inset-0 bg-black/40"
            onClick={() => setIsSidebarOpen(false)}
            aria-hidden="true"
          />
          <aside className="absolute left-0 top-0 h-full w-80 max-w-[85%] bg-white shadow-2xl p-6">
            <div className="mt-6 md:mt-8 flex items-center justify-between">
              <span className="font-heading text-3xl md:text-4xl font-bold text-black">MEORIS</span>
              <button
                type="button"
                aria-label="Tutup menu"
                className="p-2 rounded hover:opacity-80 text-black cursor-pointer"
                onClick={() => setIsSidebarOpen(false)}
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                  <path d="M6 6l12 12M18 6L6 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                </svg>
              </button>
            </div>
            <nav className="mt-10 md:mt-12">
              <ul className="space-y-5 font-body text-gray-800">
                <li>
                  <a href="#produk" onClick={() => setIsSidebarOpen(false)} className="flex items-center justify-between text-black hover:underline">
                    <span className="font-heading text-base">Produk</span>
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                      <path d="M9 5l7 7-7 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                    </svg>
                  </a>
                </li>
                <li>
                  <a href="/my-account" className="flex items-center justify-between text-black hover:underline">
                    <span className="font-heading text-base">Informasi Akun</span>
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                      <path d="M9 5l7 7-7 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                    </svg>
                  </a>
                </li>
                <li>
                  <a href="/produk/pesanan" className="flex items-center justify-between text-black hover:underline">
                    <span>History Pesanan</span>
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                      <path d="M9 5l7 7-7 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                    </svg>
                  </a>
                </li>
              </ul>
            </nav>
          </aside>
        </div>
      )}
      {isSearchOpen && (
        <div className="fixed inset-0 z-[70]">
          <div
            className="absolute inset-0 bg-black/40"
            onClick={() => setIsSearchOpen(false)}
            aria-hidden="true"
          />
          <aside className="absolute right-0 top-0 h-full w-96 max-w-[92%] bg-white shadow-2xl p-6 flex flex-col">
            {/* Pull-tab close button on the left edge */}
            <button
              type="button"
              aria-label="Tutup pencarian"
              className="absolute -left-12 top-6 w-14 h-10 bg-white rounded-l-lg rounded-r-none text-black flex items-center justify-center"
              onClick={() => setIsSearchOpen(false)}
            >
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                <path d="M9 5l7 7-7 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              </svg>
            </button>

            <div className="flex items-center justify-between">
              <span className="font-heading text-xl md:text-2xl text-black">Cari Produk</span>
            </div>
            <div className="mt-6">
              <input
                type="text"
                placeholder="Cari produk"
                className="w-full rounded-none border border-gray-300 px-4 py-3 text-black placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-black/40"
              />
              <div className="mt-3">
                <button className="w-full rounded-none bg-black text-white px-4 py-2 font-body text-sm hover:opacity-90 transition">Cari</button>
              </div>
            </div>
            <div className="mt-6">
              <p className="font-heading text-black">Hasil pencarian</p>
            </div>
              <div className="mt-4 flex-1 overflow-y-auto space-y-5">
                {homeCartItems && homeCartItems.length > 0 ? (
                  homeCartItems.map((item: any) => (
                    <div key={item.id} className="flex items-center gap-4">
                      <div className="relative w-16 h-16 overflow-hidden border border-gray-200 bg-gray-100 shrink-0">
                        <Image src="/images/test1p.png" alt="Hasil produk" fill sizes="64px" className="object-cover" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="font-body text-gray-900 truncate">{item.produk?.nama_produk || "Produk"}</p>
                        <p className="font-body text-sm text-gray-700 mt-1">
                          <span className="text-black">{item.quantity} x</span> Rp {Number(item.produk?.harga || 0).toLocaleString("id-ID")} {item.size ? <span className="ml-2 text-gray-500">Uk: {item.size}</span> : null}
                        </p>
                      </div>
                    </div>
